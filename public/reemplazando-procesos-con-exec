<!DOCTYPE html>
<html>
  <head>
    <meta http-eqiv="content-type" content="text/html;charset=utf-8">
    <title>Go con Ejemplos: Reemplazando procesos con exec</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-51269806-1', 'goconejemplos.com');
    ga('send', 'pageview');

  </script>
  <body>
    <div class="example" id="reemplazando-procesos-con-exec">
      <h2><a href="./">Go con Ejemplos</a>: Reemplazando procesos con exec</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>En el previo ejemplo vimos como
<a href="creaando-procesos">crear un nuevo proceso</a>. Hacemos
esto cuando necesitamos que el proceso sea accesible
al proceso en Go que se está ejecutando. A veces
necesitamos reemplazar completamente el proceso
actual en Go con otro proceso (quizá no-Go). Para
ello usaremo la implementación en Go de la clásica
función <a href="http://en.wikipedia.org/wiki/Exec_(operating_system)"><code>exec</code></a>.</p>

          </td>
          <td class="code leading">
          <a href="http://play.golang.org/p/StAW_-LFp1"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;syscall&quot;</span>
<span class="kn">import</span> <span class="s">&quot;os&quot;</span>
<span class="kn">import</span> <span class="s">&quot;os/exec&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Para nuestro ejemplo usaremos <code>ls</code>. Go necesita
la ruta absoluta al binario que queremos ejecutar,
así que usaremos <code>exec.LookPath</code> para encontrarla
(probablemente en <code>/bin/ls</code>).</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="nx">binary</span><span class="p">,</span> <span class="nx">lookErr</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nx">LookPath</span><span class="p">(</span><span class="s">&quot;ls&quot;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">lookErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">lookErr</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Exec</code> necesita los argumentos en forma de slice
(en vez de un gran string). Le daremos a <code>ls</code>
algunos argumentos comunes. El primer argumento
debe de ser el nombre del programa.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="nx">args</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;-a&quot;</span><span class="p">,</span> <span class="s">&quot;-l&quot;</span><span class="p">,</span> <span class="s">&quot;-h&quot;</span><span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Exec</code> también necesita un conjunto de <a href="variable-de-entorno">variables de entorno</a>.
Aquí solamente le pasaremos nuestro ambiente
actual.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="nx">env</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Environ</span><span class="p">()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Aquí está la llamada a <code>os.Exec</code>. Si la llamada
es exitósa, la ejecución de nuestro proceso
terminará y será reemplazada por el proceso
<code>/bin/ls -a -l -h</code>. Si existe algún error,
recibiremos un valor de retorn.</p>

          </td>
          <td class="code">
          
            <div class="highlight"><pre>    <span class="nx">execErr</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">binary</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">execErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">execErr</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Cuando corremos nuestro programa este es
reemplazado por <code>ls</code>.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="gp">$</span> go run reemplazando-procesos-con-exec.go
<span class="go">total 16</span>
<span class="go">drwxr-xr-x  4 mark 136B Oct 3 16:29 .</span>
<span class="go">drwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..</span>
<span class="go">-rw-r--r--  1 mark 1.3K Oct 3 16:28 </span>
<span class="go">reemplazando-procesos-con-exec.go</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Go no ofrece un clásico <code>fork</code> de Unix.
Usualmente esto no causa problems ya que
crear gorutinas, lanzar nuevos procesos
y reemplazar el proceso actual con exec,
cubre la mayoría de los usos de <code>fork</code>.</p>

          </td>
          <td class="code empty">
          
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Siguiente ejemplo: <a href="signals">Signals</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | <a href="mailto:mmcgrana@gmail.com">feedback</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/reemplazando-procesos-con-exec">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
